# ---------------------------------------------------------------------------
#                         Copyright Joe Drago 2018.
#         Distributed under the Boost Software License, Version 1.0.
#            (See accompanying file LICENSE_1_0.txt or copy at
#                  http://www.boost.org/LICENSE_1_0.txt)
# ---------------------------------------------------------------------------

fs = require 'fs'
util = require 'util'

browserify = require 'browserify'
coffeeify = require 'coffeeify'
uglifyify = require 'uglifyify'

nodeStatic = require 'node-static'
watch = require 'node-watch'

makeBundle = (forNode, forceProduction, mainCoffee, bundleFilename, callback) ->
  # equal of command line $ "browserify --debug -t coffeeify ./src/main.coffee > bundle.js "
  productionBuild = (process.env.NODE_ENV == 'production')
  if forceProduction
    productionBuild = true
  opts = {
    extensions: ['.coffee']
  }
  if forNode
    opts.builtins = []
    opts.detectGlobals = false
    opts.insertGlobals = false
    # opts.commondir = false
  if not productionBuild
    opts.debug = true
  b = browserify opts
  b.add mainCoffee
  b.transform coffeeify
  if productionBuild
    b.transform { global: true }, uglifyify
  b.bundle (err, result) ->
    if not err
      fs.writeFile bundleFilename, result, (err) ->
        if not err
          util.log "Compilation finished: #{bundleFilename}"
          callback?()
        else
          util.log "Bundle write failed: " + err
    else
      util.log "Compilation failed: " + err

makeTemplateHTML = (srcFilename, dstFilename, callback) ->
  lines = fs.readFileSync(srcFilename, "utf8").split(/\n/)
  output = ""
  for line in lines
    line = line.replace /#include\{([^\}]+)\}/g, (match, filename) ->
      if fs.existsSync(filename)
        return fs.readFileSync(filename, "utf8")
      return ""
    output += line
    output += "\n"
  fs.writeFileSync(dstFilename, output)
  util.log "Wrote #{dstFilename}"
  callback?()

# This attempts to perform the operation that Colorist's native code actually does.
# Stealing the payload from a recent native colorist report run and dropping it into
# test.payload allows for really quick/easy report.html iteration.
mimicColorist = (callback) ->
  if not fs.existsSync("test.payload")
    util.log "mimicColorist: No test.payload, skipping"
    callback?()
    return

  # This is all colorist does (on the native side).
  payload = fs.readFileSync("test.payload", "utf8")
  template = fs.readFileSync("reportTemplate.html", "utf8") # reportTemplate.html is embedded in colorist
  template = template.replace(/__COLORIST_DATA__/, payload)
  fs.writeFileSync("index.html", template)

  util.log "mimicColorist: wrote index.html"
  callback?()

buildEverything = (forceProduction, callback) ->
  makeBundle false, forceProduction, './src/coffee/report.coffee', "reportTemplate.js", ->
    makeTemplateHTML "src/raw/report.html", "reportTemplate.html", ->
      mimicColorist ->
        callback?()

task 'build', 'build', (options) ->
  buildEverything false, ->

task 'prod', 'build', (options) ->
  buildEverything true, ->

watchEverything = ->
  util.log "Watching for changes in src"
  watch ['src/raw', 'src/coffee', 'package.json'], (evt, filename) ->
      util.log "Source file #{filename} changed."
      util.log "Rebuilding..."
      buildEverything(false)
  buildEverything(false)

task 'serve', 'serve App and watch', (options) ->
  console.log "nodeStatic #{Object.keys(nodeStatic)}"
  fileServer = new nodeStatic.Server('.', { cache: 0 })
  require('http').createServer( (request, response) ->
    request.addListener('end', ->
      util.log "Serving #{request.url}"
      fileServer.serve(request, response)
    ).resume()
  ).listen(8080)
  util.log "Listening on port 8080"
  watchEverything()
