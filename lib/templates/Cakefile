# ---------------------------------------------------------------------------
#                         Copyright Joe Drago 2018.
#         Distributed under the Boost Software License, Version 1.0.
#            (See accompanying file LICENSE_1_0.txt or copy at
#                  http://www.boost.org/LICENSE_1_0.txt)
# ---------------------------------------------------------------------------

fs = require 'fs'
util = require 'util'

browserify = require 'browserify'
coffeeify = require 'coffeeify'
uglifyify = require 'uglifyify'

makeBundle = (forNode, mainCoffee, bundleFilename, callback) ->
  # equal of command line $ "browserify --debug -t coffeeify ./src/main.coffee > bundle.js "
  productionBuild = (process.env.NODE_ENV == 'production')
  opts = {
    extensions: ['.coffee']
  }
  if forNode
    opts.builtins = []
    opts.detectGlobals = false
    opts.insertGlobals = false
    # opts.commondir = false
  if not productionBuild
    opts.debug = true
  b = browserify opts
  b.add mainCoffee
  b.transform coffeeify
  if productionBuild
    b.transform { global: true }, uglifyify
  b.bundle (err, result) ->
    if not err
      fs.writeFile bundleFilename, result, (err) ->
        if not err
          util.log "Compilation finished: #{bundleFilename}"
          callback?()
        else
          util.log "Bundle write failed: " + err
    else
      util.log "Compilation failed: " + err

makeHTML = (srcFilename, dstFilename, callback) ->
  lines = fs.readFileSync(srcFilename, "utf8").split(/\n/)
  output = ""
  for line in lines
    line = line.replace /#include\{([^\}]+)\}/g, (match, filename) ->
      if fs.existsSync(filename)
        return fs.readFileSync(filename, "utf8")
      return ""
    output += line
    output += "\n"
  fs.writeFileSync(dstFilename, output)
  callback?()

task 'build', 'build', (options) ->
  makeBundle false, './src/report.coffee', "reportTemplate.js", ->
    makeHTML "src/report.html", "reportTemplate.html", ->
